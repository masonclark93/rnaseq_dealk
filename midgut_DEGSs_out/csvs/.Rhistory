# Set the new column names to the dataframe
colnames(counts_needed) <- new_col_names
#merge the two and get only siggenes to contribute to the heatmap
merged <- merge(df, counts_needed, by=0, all=TRUE)
merged <- subset(merged, merged$test == "TRUE")
#Subset only the sig counts where counts > 0
sigs <- merged[,c(2,9,11:18)]
#Get row sums
row_sums <- rowSums(sigs[,3:10])
sigs <- sigs[row_sums != 0, ]
if (nrow(sigs) > 50){
sigs$rank <- rank(-(sigs$padj), ties.method = "random")
sigs <- sigs[1:50,]
}
#Heatmap of significantly differntially expressed genes
#log2+1 scales the reads to
#scale = row creates Z scores
heatmap <- pheatmap(log2(sigs[,3:10] + 1), scale = 'row',
cluster_cols=F, treeheight_row = 0, treeheight_col = 0,
show_rownames = T, cluster_rows =T, labels_row = sigs$transcript_ID)
#add to the list
heatmaps_list <<- append(heatmaps_list, list(heatmap))
return(NULL)
}
make_midgut_heatmaps("Sit8h_VS_Chl8h_midgut_contrast.csv", columns_to_subset = c(18:21,38:41))
sigs
View(sigs)
merged <- merge(df, counts_needed, by=0, all=TRUE)
merged <- subset(merged, merged$test == "TRUE")
#Subset only the sig counts where counts > 0
sigs <- merged[,c(2,9,11:18)]
sigs$rank <- rank(-(sigs$padj), ties.method = "random")
sigs <- sigs[order(sigs$rank, decreasing = TRUE)]
#Function to make heatmaps
make_midgut_heatmaps <- function(wald_test_file, columns_to_subset, title){
#get
setwd(migcsvs)
#Get the CSV file
df <- read.csv(wald_test_file)
#Subset the normalization file to pull out normalized counts
counts_needed <- midgut_normcounts[,columns_to_subset]
#Clean up the column names
col_names <- colnames(counts_needed)
#Remove the common extension from column names
new_col_names <- sub("_paired_kraken2_unclassified_out_1.fq.Aligned.sortedByCoord.out.bam.reverse_stranded$", "", col_names)
# Set the new column names to the dataframe
colnames(counts_needed) <- new_col_names
#merge the two and get only siggenes to contribute to the heatmap
merged <- merge(df, counts_needed, by=0, all=TRUE)
merged <- subset(merged, merged$test == "TRUE")
#Subset only the sig counts where counts > 0
sigs <- merged[,c(2,9,11:18)]
#Get row sums
row_sums <- rowSums(sigs[,3:10])
sigs <- sigs[row_sums != 0, ]
if (nrow(sigs) > 50){
sigs <- sigs[order(sigs$padj, decreasing = FALSE)]
sigs <- sigs[1:50,]
}
#Heatmap of significantly differntially expressed genes
#log2+1 scales the reads to
#scale = row creates Z scores
heatmap <- pheatmap(log2(sigs[,3:10] + 1), scale = 'row',
cluster_cols=F, treeheight_row = 0, treeheight_col = 0,
show_rownames = T, cluster_rows =T, labels_row = sigs$transcript_ID)
#add to the list
heatmaps_list <<- append(heatmaps_list, list(heatmap))
return(NULL)
}
make_midgut_heatmaps("Sit8h_VS_Chl8h_midgut_contrast.csv", columns_to_subset = c(18:21,38:41))
#Function to make heatmaps
make_midgut_heatmaps <- function(wald_test_file, columns_to_subset, title){
#get
setwd(migcsvs)
#Get the CSV file
df <- read.csv(wald_test_file)
#Subset the normalization file to pull out normalized counts
counts_needed <- midgut_normcounts[,columns_to_subset]
#Clean up the column names
col_names <- colnames(counts_needed)
#Remove the common extension from column names
new_col_names <- sub("_paired_kraken2_unclassified_out_1.fq.Aligned.sortedByCoord.out.bam.reverse_stranded$", "", col_names)
# Set the new column names to the dataframe
colnames(counts_needed) <- new_col_names
#merge the two and get only siggenes to contribute to the heatmap
merged <- merge(df, counts_needed, by=0, all=TRUE)
merged <- subset(merged, merged$test == "TRUE")
#Subset only the sig counts where counts > 0
sigs <- merged[,c(2,9,11:18)]
#Get row sums
row_sums <- rowSums(sigs[,3:10])
sigs <- sigs[row_sums != 0, ]
if (nrow(sigs) > 50){
sigs <- sigs[order(sigs$padj, decreasing = FALSE),]
sigs <- sigs[1:50,]
}
#Heatmap of significantly differntially expressed genes
#log2+1 scales the reads to
#scale = row creates Z scores
heatmap <- pheatmap(log2(sigs[,3:10] + 1), scale = 'row',
cluster_cols=F, treeheight_row = 0, treeheight_col = 0,
show_rownames = T, cluster_rows =T, labels_row = sigs$transcript_ID)
#add to the list
heatmaps_list <<- append(heatmaps_list, list(heatmap))
return(NULL)
}
make_midgut_heatmaps("Sit8h_VS_Chl8h_midgut_contrast.csv", columns_to_subset = c(18:21,38:41))
#Function to make heatmaps
make_midgut_heatmaps <- function(wald_test_file, columns_to_subset, title){
#get
setwd(migcsvs)
#Get the CSV file
df <- read.csv(wald_test_file)
#Subset the normalization file to pull out normalized counts
counts_needed <- midgut_normcounts[,columns_to_subset]
#Clean up the column names
col_names <- colnames(counts_needed)
#Remove the common extension from column names
new_col_names <- sub("_paired_kraken2_unclassified_out_1.fq.Aligned.sortedByCoord.out.bam.reverse_stranded$", "", col_names)
# Set the new column names to the dataframe
colnames(counts_needed) <- new_col_names
#merge the two and get only siggenes to contribute to the heatmap
merged <- merge(df, counts_needed, by=0, all=TRUE)
merged <- subset(merged, merged$test == "TRUE")
#Subset only the sig counts where counts > 0
sigs <- merged[,c(2,9,11:18)]
#Get row sums
row_sums <- rowSums(sigs[,3:10])
sigs <- sigs[row_sums != 0, ]
if (nrow(sigs) > 50){
sigs$regulation <- ifelse(sigs$log2FoldChange > 0, rep("up"), rep("down"))
sigsup <- subset(sigs, sigs$regulation == "up")
sigsdwn <- subset(sigs, sigs$regulation == "down")
sigsup <- sigsup[order(sigsup$padj, decreasing = FALSE),]
sigsdwn <- sigsdwn[order(sigsdown$padj, decreasing = FALSE),]
sigsup <- sigsup[1:25,]
sigsdwn <- sigdwn[1:25,]
sigsall <- c(sigsup, sigsdown)
sigs <- do.call(rbind, sigsall)
}
#Heatmap of significantly differntially expressed genes
#log2+1 scales the reads to
#scale = row creates Z scores
heatmap <- pheatmap(log2(sigs[,3:10] + 1), scale = 'row',
cluster_cols=F, treeheight_row = 0, treeheight_col = 0,
show_rownames = T, cluster_rows =T, labels_row = sigs$transcript_ID)
#add to the list
heatmaps_list <<- append(heatmaps_list, list(heatmap))
return(NULL)
}
make_midgut_heatmaps("Sit8h_VS_Chl8h_midgut_contrast.csv", columns_to_subset = c(18:21,38:41))
?ifelse
View(merged)
#Function to make heatmaps
make_midgut_heatmaps <- function(wald_test_file, columns_to_subset, title){
#get
setwd(migcsvs)
#Get the CSV file
df <- read.csv(wald_test_file)
#Subset the normalization file to pull out normalized counts
counts_needed <- midgut_normcounts[,columns_to_subset]
#Clean up the column names
col_names <- colnames(counts_needed)
#Remove the common extension from column names
new_col_names <- sub("_paired_kraken2_unclassified_out_1.fq.Aligned.sortedByCoord.out.bam.reverse_stranded$", "", col_names)
# Set the new column names to the dataframe
colnames(counts_needed) <- new_col_names
#merge the two and get only siggenes to contribute to the heatmap
merged <- merge(df, counts_needed, by=0, all=TRUE)
merged <- subset(merged, merged$test == "TRUE")
#Subset only the sig counts where counts > 0
sigs <- merged[,c(2,5,9,11:18)]
#Get row sums
row_sums <- rowSums(sigs[,4:11])
sigs <- sigs[row_sums != 0, ]
if (nrow(sigs) > 50){
sigs$regulation <- ifelse(sigs$log2FoldChange > 0, rep("up"), rep("down"))
sigsup <- subset(sigs, sigs$regulation == "up")
sigsdwn <- subset(sigs, sigs$regulation == "down")
sigsup <- sigsup[order(sigsup$padj, decreasing = FALSE),]
sigsdwn <- sigsdwn[order(sigsdown$padj, decreasing = FALSE),]
sigsup <- sigsup[1:25,]
sigsdwn <- sigdwn[1:25,]
sigsall <- c(sigsup, sigsdown)
sigs <- do.call(rbind, sigsall)
}
#Heatmap of significantly differntially expressed genes
#log2+1 scales the reads to
#scale = row creates Z scores
heatmap <- pheatmap(log2(sigs[,4:11] + 1), scale = 'row',
cluster_cols=F, treeheight_row = 0, treeheight_col = 0,
show_rownames = T, cluster_rows =T, labels_row = sigs$transcript_ID)
#add to the list
heatmaps_list <<- append(heatmaps_list, list(heatmap))
return(NULL)
}
make_midgut_heatmaps("Sit8h_VS_Chl8h_midgut_contrast.csv", columns_to_subset = c(18:21,38:41))
#Function to make heatmaps
make_midgut_heatmaps <- function(wald_test_file, columns_to_subset, title){
#get
setwd(migcsvs)
#Get the CSV file
df <- read.csv(wald_test_file)
#Subset the normalization file to pull out normalized counts
counts_needed <- midgut_normcounts[,columns_to_subset]
#Clean up the column names
col_names <- colnames(counts_needed)
#Remove the common extension from column names
new_col_names <- sub("_paired_kraken2_unclassified_out_1.fq.Aligned.sortedByCoord.out.bam.reverse_stranded$", "", col_names)
# Set the new column names to the dataframe
colnames(counts_needed) <- new_col_names
#merge the two and get only siggenes to contribute to the heatmap
merged <- merge(df, counts_needed, by=0, all=TRUE)
merged <- subset(merged, merged$test == "TRUE")
#Subset only the sig counts where counts > 0
sigs <- merged[,c(2,5,9,11:18)]
#Get row sums
row_sums <- rowSums(sigs[,4:11])
sigs <- sigs[row_sums != 0, ]
if (nrow(sigs) > 50){
sigs$regulation <- ifelse(sigs$log2FoldChange > 0, rep("up"), rep("down"))
sigsup <- subset(sigs, sigs$regulation == "up")
sigsdwn <- subset(sigs, sigs$regulation == "down")
sigsup <- sigsup[order(sigsup$padj, decreasing = FALSE),]
sigsdwn <- sigsdwn[order(sigsdwn$padj, decreasing = FALSE),]
sigsup <- sigsup[1:25,]
sigsdwn <- sigdwn[1:25,]
sigsall <- c(sigsup, sigsdown)
sigs <- do.call(rbind, sigsall)
}
#Heatmap of significantly differntially expressed genes
#log2+1 scales the reads to
#scale = row creates Z scores
heatmap <- pheatmap(log2(sigs[,4:11] + 1), scale = 'row',
cluster_cols=F, treeheight_row = 0, treeheight_col = 0,
show_rownames = T, cluster_rows =T, labels_row = sigs$transcript_ID)
#add to the list
heatmaps_list <<- append(heatmaps_list, list(heatmap))
return(NULL)
}
make_midgut_heatmaps("Sit8h_VS_Chl8h_midgut_contrast.csv", columns_to_subset = c(18:21,38:41))
#Function to make heatmaps
make_midgut_heatmaps <- function(wald_test_file, columns_to_subset, title){
#get
setwd(migcsvs)
#Get the CSV file
df <- read.csv(wald_test_file)
#Subset the normalization file to pull out normalized counts
counts_needed <- midgut_normcounts[,columns_to_subset]
#Clean up the column names
col_names <- colnames(counts_needed)
#Remove the common extension from column names
new_col_names <- sub("_paired_kraken2_unclassified_out_1.fq.Aligned.sortedByCoord.out.bam.reverse_stranded$", "", col_names)
# Set the new column names to the dataframe
colnames(counts_needed) <- new_col_names
#merge the two and get only siggenes to contribute to the heatmap
merged <- merge(df, counts_needed, by=0, all=TRUE)
merged <- subset(merged, merged$test == "TRUE")
#Subset only the sig counts where counts > 0
sigs <- merged[,c(2,5,9,11:18)]
#Get row sums
row_sums <- rowSums(sigs[,4:11])
sigs <- sigs[row_sums != 0, ]
if (nrow(sigs) > 50){
sigs$regulation <- ifelse(sigs$log2FoldChange > 0, rep("up"), rep("down"))
sigsup <- subset(sigs, sigs$regulation == "up")
sigsdwn <- subset(sigs, sigs$regulation == "down")
sigsup <- sigsup[order(sigsup$padj, decreasing = FALSE),]
sigsdwn <- sigsdwn[order(sigsdwn$padj, decreasing = FALSE),]
sigsup <- sigsup[1:25,]
sigsdwn <- sigsdwn[1:25,]
sigsall <- c(sigsup, sigsdown)
sigs <- do.call(rbind, sigsall)
}
#Heatmap of significantly differntially expressed genes
#log2+1 scales the reads to
#scale = row creates Z scores
heatmap <- pheatmap(log2(sigs[,4:11] + 1), scale = 'row',
cluster_cols=F, treeheight_row = 0, treeheight_col = 0,
show_rownames = T, cluster_rows =T, labels_row = sigs$transcript_ID)
#add to the list
heatmaps_list <<- append(heatmaps_list, list(heatmap))
return(NULL)
}
make_midgut_heatmaps("Sit8h_VS_Chl8h_midgut_contrast.csv", columns_to_subset = c(18:21,38:41))
#Function to make heatmaps
make_midgut_heatmaps <- function(wald_test_file, columns_to_subset, title){
#get
setwd(migcsvs)
#Get the CSV file
df <- read.csv(wald_test_file)
#Subset the normalization file to pull out normalized counts
counts_needed <- midgut_normcounts[,columns_to_subset]
#Clean up the column names
col_names <- colnames(counts_needed)
#Remove the common extension from column names
new_col_names <- sub("_paired_kraken2_unclassified_out_1.fq.Aligned.sortedByCoord.out.bam.reverse_stranded$", "", col_names)
# Set the new column names to the dataframe
colnames(counts_needed) <- new_col_names
#merge the two and get only siggenes to contribute to the heatmap
merged <- merge(df, counts_needed, by=0, all=TRUE)
merged <- subset(merged, merged$test == "TRUE")
#Subset only the sig counts where counts > 0
sigs <- merged[,c(2,5,9,11:18)]
#Get row sums
row_sums <- rowSums(sigs[,4:11])
sigs <- sigs[row_sums != 0, ]
if (nrow(sigs) > 50){
sigs$regulation <- ifelse(sigs$log2FoldChange > 0, rep("up"), rep("down"))
sigsup <- subset(sigs, sigs$regulation == "up")
sigsdwn <- subset(sigs, sigs$regulation == "down")
sigsup <- sigsup[order(sigsup$padj, decreasing = FALSE),]
sigsdwn <- sigsdwn[order(sigsdwn$padj, decreasing = FALSE),]
sigsup <- sigsup[1:25,]
sigsdwn <- sigsdwn[1:25,]
sigsall <- c(sigsup, sigsdwn)
sigs <- do.call(rbind, sigsall)
}
#Heatmap of significantly differntially expressed genes
#log2+1 scales the reads to
#scale = row creates Z scores
heatmap <- pheatmap(log2(sigs[,4:11] + 1), scale = 'row',
cluster_cols=F, treeheight_row = 0, treeheight_col = 0,
show_rownames = T, cluster_rows =T, labels_row = sigs$transcript_ID)
#add to the list
heatmaps_list <<- append(heatmaps_list, list(heatmap))
return(NULL)
}
make_midgut_heatmaps("Sit8h_VS_Chl8h_midgut_contrast.csv", columns_to_subset = c(18:21,38:41))
#Function to make heatmaps
make_midgut_heatmaps <- function(wald_test_file, columns_to_subset, title){
#get
setwd(migcsvs)
#Get the CSV file
df <- read.csv(wald_test_file)
#Subset the normalization file to pull out normalized counts
counts_needed <- midgut_normcounts[,columns_to_subset]
#Clean up the column names
col_names <- colnames(counts_needed)
#Remove the common extension from column names
new_col_names <- sub("_paired_kraken2_unclassified_out_1.fq.Aligned.sortedByCoord.out.bam.reverse_stranded$", "", col_names)
# Set the new column names to the dataframe
colnames(counts_needed) <- new_col_names
#merge the two and get only siggenes to contribute to the heatmap
merged <- merge(df, counts_needed, by=0, all=TRUE)
merged <- subset(merged, merged$test == "TRUE")
#Subset only the sig counts where counts > 0
sigs <- merged[,c(2,5,9,11:18)]
#Get row sums
row_sums <- rowSums(sigs[,4:11])
sigs <- sigs[row_sums != 0, ]
if (nrow(sigs) > 50){
sigs$regulation <- ifelse(sigs$log2FoldChange > 0, rep("up"), rep("down"))
sigsup <- subset(sigs, sigs$regulation == "up")
sigsdwn <- subset(sigs, sigs$regulation == "down")
sigsup <- sigsup[order(sigsup$padj, decreasing = FALSE),]
sigsdwn <- sigsdwn[order(sigsdwn$padj, decreasing = FALSE),]
sigsup <- sigsup[1:25,]
sigsdwn <- sigsdwn[1:25,]
sigsall <- c(sigsup, sigsdwn)
sigs <- do.call(rbind, sigsall)
}
#Heatmap of significantly differntially expressed genes
#log2+1 scales the reads to
#scale = row creates Z scores
heatmap <- pheatmap(log2(sigs[,4:11] + 1), scale = 'row',
cluster_cols=F, treeheight_row = 0, treeheight_col = 0,
show_rownames = T, cluster_rows =T)
#add to the list
heatmaps_list <<- append(heatmaps_list, list(heatmap))
return(NULL)
}
make_midgut_heatmaps("Sit8h_VS_Chl8h_midgut_contrast.csv", columns_to_subset = c(18:21,38:41))
sigs <- merged[,c(2,5,9,11:18)]
sigs$regulation <- ifelse(sigs$log2FoldChange > 0, rep("up"), rep("down"))
sigs
sigsup <- subset(sigs, sigs$regulation == "up")
sigsup
sigsdwn <- subset(sigs, sigs$regulation == "down")
sigsdwn <- sigsdwn[order(sigsdwn$padj, decreasing = FALSE),]
if (nrows(sigsup) > 25){
sigsup <- sigsup[1:25,]
}
if (nrow(sigsup) > 25){
sigsup <- sigsup[1:25,]
}
if (nrow(sigsdwn) > 25){
sigsdwn <- sigsdwn[1:25,]
}
sigsall <- c(sigsup, sigsdwn)
sigs <- do.call(rbind, sigsall)
sigs <- merged[,c(2,5,9,11:18)]
row_sums <- rowSums(sigs[,4:11])
sigs <- sigs[row_sums != 0, ]
sigs$regulation <- ifelse(sigs$log2FoldChange > 0, rep("up"), rep("down"))
sigsup <- subset(sigs, sigs$regulation == "up")
sigsdwn <- subset(sigs, sigs$regulation == "down")
sigsup <- sigsup[order(sigsup$padj, decreasing = FALSE),]
sigsdwn <- sigsdwn[order(sigsdwn$padj, decreasing = FALSE),]
View(sigsup)
View(sigsdwn)
if (nrow(sigsup) > 25){
sigsup <- sigsup[1:25,]
}
sigsup
View(sigsup)
if (nrow(sigsdwn) > 25){
sigsdwn <- sigsdwn[1:25,]
}
View(sigsdwn)
sigsall <- list(sigsup, sigsdwn)
sigs <- do.call(rbind, sigsall)
View(sigs)
#Function to make heatmaps
make_midgut_heatmaps <- function(wald_test_file, columns_to_subset, title){
#get
setwd(migcsvs)
#Get the CSV file
df <- read.csv(wald_test_file)
#Subset the normalization file to pull out normalized counts
counts_needed <- midgut_normcounts[,columns_to_subset]
#Clean up the column names
col_names <- colnames(counts_needed)
#Remove the common extension from column names
new_col_names <- sub("_paired_kraken2_unclassified_out_1.fq.Aligned.sortedByCoord.out.bam.reverse_stranded$", "", col_names)
# Set the new column names to the dataframe
colnames(counts_needed) <- new_col_names
#merge the two and get only siggenes to contribute to the heatmap
merged <- merge(df, counts_needed, by=0, all=TRUE)
merged <- subset(merged, merged$test == "TRUE")
#Subset only the sig counts where counts > 0
sigs <- merged[,c(2,5,9,11:18)]
#Get row sums
row_sums <- rowSums(sigs[,4:11])
sigs <- sigs[row_sums != 0, ]
if (nrow(sigs) > 50){
sigs$regulation <- ifelse(sigs$log2FoldChange > 0, rep("up"), rep("down"))
sigsup <- subset(sigs, sigs$regulation == "up")
sigsdwn <- subset(sigs, sigs$regulation == "down")
sigsup <- sigsup[order(sigsup$padj, decreasing = FALSE),]
sigsdwn <- sigsdwn[order(sigsdwn$padj, decreasing = FALSE),]
if (nrow(sigsup) > 25){
sigsup <- sigsup[1:25,]
}
if (nrow(sigsdwn) > 25){
sigsdwn <- sigsdwn[1:25,]
}
sigsall <- list(sigsup, sigsdwn)
sigs <- do.call(rbind, sigsall)
}
#Heatmap of significantly differntially expressed genes
#log2+1 scales the reads to
#scale = row creates Z scores
heatmap <- pheatmap(log2(sigs[,4:11] + 1), scale = 'row',
cluster_cols=F, treeheight_row = 0, treeheight_col = 0,
show_rownames = T, cluster_rows =T)
#add to the list
heatmaps_list <<- append(heatmaps_list, list(heatmap))
return(NULL)
}
#Let's test it
make_midgut_heatmaps("Sit4h_VS_Chl4h_midgut_contrast.csv", columns_to_subset = c(10:13,34:37))
make_midgut_heatmaps("Sit8h_VS_Chl8h_midgut_contrast.csv", columns_to_subset = c(18:21,38:41))
?pheatmap
#Function to make heatmaps
make_midgut_heatmaps <- function(wald_test_file, columns_to_subset, title){
#get
setwd(migcsvs)
#Get the CSV file
df <- read.csv(wald_test_file)
#Subset the normalization file to pull out normalized counts
counts_needed <- midgut_normcounts[,columns_to_subset]
#Clean up the column names
col_names <- colnames(counts_needed)
#Remove the common extension from column names
new_col_names <- sub("_paired_kraken2_unclassified_out_1.fq.Aligned.sortedByCoord.out.bam.reverse_stranded$", "", col_names)
# Set the new column names to the dataframe
colnames(counts_needed) <- new_col_names
#merge the two and get only siggenes to contribute to the heatmap
merged <- merge(df, counts_needed, by=0, all=TRUE)
merged <- subset(merged, merged$test == "TRUE")
#Subset only the sig counts where counts > 0
sigs <- merged[,c(2,5,9,11:18)]
#Get row sums
row_sums <- rowSums(sigs[,4:11])
sigs <- sigs[row_sums != 0, ]
if (nrow(sigs) > 50){
sigs$regulation <- ifelse(sigs$log2FoldChange > 0, rep("up"), rep("down"))
sigsup <- subset(sigs, sigs$regulation == "up")
sigsdwn <- subset(sigs, sigs$regulation == "down")
sigsup <- sigsup[order(sigsup$padj, decreasing = FALSE),]
sigsdwn <- sigsdwn[order(sigsdwn$padj, decreasing = FALSE),]
if (nrow(sigsup) > 25){
sigsup <- sigsup[1:25,]
}
if (nrow(sigsdwn) > 25){
sigsdwn <- sigsdwn[1:25,]
}
sigsall <- list(sigsup, sigsdwn)
sigs <- do.call(rbind, sigsall)
}
#Heatmap of significantly differntially expressed genes
#log2+1 scales the reads to
#scale = row creates Z scores
heatmap <- pheatmap(log2(sigs[,4:11] + 1), scale = 'row',
cluster_cols=F, treeheight_row = 0, treeheight_col = 0,
show_rownames = T, cluster_rows =T, labels_row = sigs$transcript_ID)
#add to the list
heatmaps_list <<- append(heatmaps_list, list(heatmap))
return(NULL)
}
make_midgut_heatmaps("Sit8h_VS_Chl8h_midgut_contrast.csv", columns_to_subset = c(18:21,38:41))
